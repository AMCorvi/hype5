{"version":3,"sources":["index.js","index.test.js"],"names":["top","x","then","res","json","catch","console","log","error","latest","remixes","expect","require","hype5","describe","it","isAPromise","Promise","to","satisfy","array","data","be","an","contain","all","keys"],"mappings":";;;;;;;AAAA;;;;;;AAGO,IAAIA,oBAAM,SAANA,GAAM,GAAM;AACnB,QAAIC,IAAK,yBAAM,yDAAN,EACRC,IADQ,CACF;AAAA,eAASC,IAAIC,IAAJ,EAAT;AAAA,KADE,EAERF,IAFQ,CAEF,UAAEE,IAAF,EAAY;AACf,eAAOA,IAAP;AACH,KAJQ,EAKRC,KALQ,CAKD;AAAA,eAASC,QAAQC,GAAR,CAAYC,KAAZ,CAAT;AAAA,KALC,CAAT;;AAOA,WAAOP,CAAP;AACH,CATM;;AAYA,IAAIQ,0BAAS,SAATA,MAAS,GAAM;AACtB,QAAIR,IAAK,yBAAM,uDAAN,EACRC,IADQ,CACF;AAAA,eAASC,IAAIC,IAAJ,EAAT;AAAA,KADE,EAERF,IAFQ,CAEF,UAAEE,IAAF,EAAY;AACf,eAAOA,IAAP;AACH,KAJQ,EAKRC,KALQ,CAKD;AAAA,eAASC,QAAQC,GAAR,CAAYC,KAAZ,CAAT;AAAA,KALC,CAAT;;AAOA,WAAOP,CAAP;AACH,CATM;;AAWA,IAAIS,4BAAU,SAAVA,OAAU,GAAM;AACvB,QAAIT,IAAK,yBAAM,0DAAN,EACRC,IADQ,CACF;AAAA,eAASC,IAAIC,IAAJ,EAAT;AAAA,KADE,EAERF,IAFQ,CAEF,gBAAQ;AACX,eAAOE,IAAP;AACH,KAJQ,EAKRC,KALQ,CAKD;AAAA,eAASC,QAAQC,GAAR,CAAYC,KAAZ,CAAT;AAAA,KALC,CAAT;;AAOA,WAAOP,CAAP;AACH,CATM;;;AC1BP,IAAIU,SAASC,QAAQ,MAAR,EAAgBD,MAA7B;AACA,IAAIE,QAAQD,QAAQ,iBAAR,CAAZ;;AAGAE,SAAS,OAAT,EAAkB,YAAI;AAClBA,aAAS,gBAAT,EAA2B,YAAI;AAC3BC,WAAG,oCAAH,EAAwC,YAAI;;AAExC,qBAASC,UAAT,CAAoBb,GAApB,EAAwB;AACpB,uBAAOU,MAAMb,GAAN,cAAuBiB,OAA9B;AACH;;AAEDN,mBAAOE,MAAMb,GAAN,EAAP,EAAoBkB,EAApB,CAAuBC,OAAvB,CAA+BH,UAA/B;AACH,SAPD;;AASAD,WAAG,gCAAH,EAAqC,YAAI;AACrC,gBAAIK,cAAJ;;AAEAP,kBAAMb,GAAN,GAAYE,IAAZ,CAAiB,UAACmB,IAAD,EAAS;AACtBV,uBAAOU,IAAP,EAAaH,EAAb,CAAgBI,EAAhB,CAAmBC,EAAnB,CAAsB,QAAtB;AACH,aAFD;AAGH,SAND;;AAQAR,WAAG,iDAAH,EAAqD,YAAI;AACrDF,kBAAMb,GAAN,GAAYE,IAAZ,CAAiB,gBAAM;AACnBI,wBAAQC,GAAR;AACAI,uBAAOU,KAAK,GAAL,CAAP,EAAkBH,EAAlB,CAAqBM,OAArB,CAA6BC,GAA7B,CAAiCC,IAAjC,CAAsC,CAAC,YAAD,EAAc,cAAd,EAA8B,SAA9B,EAAyC,WAAzC,CAAtC;AACH,aAHD;AAIH,SALD;AAMH,KAxBD;AAyBH,CA1BD","file":"hype5.js","sourcesContent":["import fetch from 'node-fetch'\n\n\nexport let top = () => { \n    let x =  fetch('http://hypem.com/playlist/popular/3day/json/1/data.json')\n    .then( res => ( res.json() ) )\n    .then( ( json ) => {\n        return json\n    })\n    .catch( error => console.log(error) )\n\n    return x\n} \n\n\nexport let latest = () => { \n    let x =  fetch('http://hypem.com/playlist/latest/all/json/1/data.json')\n    .then( res => ( res.json() ) )\n    .then( ( json ) => {\n        return json\n    })\n    .catch( error => console.log(error) )\n\n    return x\n} \n\nexport let remixes = () => { \n    let x =  fetch('http://hypem.com/playlist/popular/remix/json/1/data.json')\n    .then( res => ( res.json() ) )\n    .then( json => {\n        return json\n    })\n    .catch( error => console.log(error) )\n    \n    return x\n} \n\n\n\n\n\n\n\n","var expect = require('chai').expect;\nvar hype5 = require('../src/index.js');\n\n\ndescribe(\"hype5\", ()=>{\n    describe(\" 'top' method \", ()=>{\n        it(\"'top' method should return promise\",()=>{\n\n            function isAPromise(res){\n                return hype5.top() instanceof Promise\n            };\n\n            expect(hype5.top()).to.satisfy(isAPromise)\n        });\n\n        it(\" Promise should contain object\", ()=>{\n            let array;\n\n            hype5.top().then((data)=> {\n                expect(data).to.be.an('object')\n            })\n        });\n\n        it(\" Promise data should contain certain properties\",()=>{\n            hype5.top().then(data=>{\n                console.log\n                expect(data[\"0\"]).to.contain.all.keys([\"artistslll\",\"titlelsslsls\", \"posturl\", \"thumb_url\"])\n            })\n        })\n    })\n})\n"]}