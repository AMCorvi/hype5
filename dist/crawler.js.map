{"version":3,"sources":["crawler.js"],"names":["casper","require","create","utils","tracks","opt","options","cli","has","type","get","filter","dump","getTrackInfo","element","document","getElementsByClassName","cool","Array","prototype","map","call","artist","querySelector","text","trackName","postLink","getAttribute","descFunc","descUnfiltered","textContent","end","indexOf","start","result","substr","desc","color","style","cssText","blogName","link","descrip","thumbnail","song","concat","scanHype","url","waitForSelector","info","evaluate","then","console","log","JSON","stringify","run"],"mappings":"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","file":"crawler.js","sourcesContent":["var casper = require(\"casper\").create();\nvar utils = require(\"utils\");\n\nvar tracks = [];\n\n/**\n * IIFE sets variable only hypeFilter varibale only if such option was provided\n *\n * @returns {object} map of options specifying search type wanted\n */\n//\nvar opt = (function() {\n\tvar options = {};\n\tcasper.cli.has(\"hypeType\")\n\t\t? (options.type = casper.cli.get(\"hypeType\"))\n\t\t: null;\n\tcasper.cli.has(\"hypeFilter\")\n\t\t? (options.filter = casper.cli.get(\"hypeFilter\"))\n\t\t: null;\n\treturn options;\n})();\n\nutils.dump(opt.filter);\nutils.dump(\"cool\");\nutils.dump(opt.type);\n\n// TODO: Document\nfunction getTrackInfo(tracks) {\n\ttracks;\n\tvar element = document.getElementsByClassName(\"section-track\");\n\tvar cool = Array.prototype.map.call(element, function(element) {\n\t\tvar artist = element.querySelector(\".artist\").text;\n\t\tvar trackName = element.querySelector(\".track\").text;\n\t\tvar postLink = element.querySelector(\".readpost\").getAttribute(\"href\");\n\t\tvar descFunc = function() {\n\t\t\tvar descUnfiltered = element.querySelector(\".post_info\").textContent;\n\t\t\t// var regex = /“(?:[^\\\\\"]+|\\\\.)*”/m ;\n\t\t\t// var result = descUnfiltered.match(regex);\n\t\t\tvar end = descUnfiltered.indexOf(\"”\") - 1;\n\t\t\tvar start = descUnfiltered.indexOf(\"“\") + 1;\n\t\t\tvar result = descUnfiltered.substr(start, end - start);\n\n\t\t\treturn result;\n\t\t};\n\t\tvar desc = descFunc();\n\t\tvar color = element.querySelector(\"a.thumb\").style.cssText;\n\n\t\tvar blogName = element.querySelector(\".blog-fav-off\").text;\n\n\t\treturn {\n\t\t\tartist: artist,\n\t\t\tlink: postLink,\n\t\t\tdescrip: desc,\n\t\t\tthumbnail: color,\n\t\t\tsong: trackName,\n\t\t\tblogName: blogName\n\t\t};\n\t});\n\treturn tracks.concat(cool);\n}\n\n/**\n * Scan Hype Machine\n *\n * @param {string} type class of track info request [latest track or most popular tracks]\n * @param {array} filter filter for specifed class of tracks [none, remixes, noremixes]\n * @returns {array} An array of tracks information\n */\nfunction scanHype(type, filter) {\n\t// set 'type' variable to popular as default if valid value is not provided\n\ttype = type || \"popular\";\n\n\t// check variable and set correct url\n\tvar url = !filter\n\t\t? `http://hypem.com/${type}/${filter}`\n\t\t: `http://hypem.com/${type}`\n\n\tutils.dump(`the url is ${url}`);\n\n\tutils.dump(`${filter===true}`);\n\t/**\n     * Start phantomjs instance that crawls url scraping data as instructed by callback function\n     *\n     * @returns {array} An array of track info from endpoint specified\n     */\n\tcasper.start(url, function() {\n\t\tthis.waitForSelector(\".post_info\", function() {\n\t\t\tvar info = this.evaluate(getTrackInfo, []);\n\t\t\treturn (tracks = info);\n\t\t});\n\t});\n\n\tcasper.then(function() {\n\t\tconsole.log(JSON.stringify(tracks, null, 2));\n\t});\n\n\tcasper.run();\n}\n\nif (opt.filter) {\n    utils.dump(\"type and filter\")\n\tscanHype(opt.type, opt.filter);\n} else {\n    utils.dump(\" type only\")\n\tscanHype(opt.type);\n}\n"]}